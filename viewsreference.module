<?php
/**
 * @file Module functions for viewsreference.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityTypeInterface;
/**
 * Implements hook_help().
 */
function viewsreference_help($route_name, RouteMatchInterface $arg) {
  switch ($route_name) {
    case 'help.page.viewsreference':
      $output = file_get_contents(drupal_get_path('module', 'viewsreference') . '/README.md');
      return \Drupal::moduleHandler()->moduleExists('markdown') ? \Drupal\Component\Utility\Xss::filterAdmin(\Drupal::moduleHandler()->invoke('markdown', 'filter', ['process', 0, -1, $output])) : '<h3>viewsreference README</h3><pre>' . \Drupal\Component\Utility\Html::escape($output) . '</pre>';
  }
}


/**
 * Implements hook_theme().
 */
function viewsreference_theme($existing, $type, $theme, $path) {
  return array(
    'viewsreference__view_title' => array(
      'template' => 'viewsreference--view-title',
      'render element' => 'variables',
    ),
  );
}

/**
 * Implements HOOK_preprocess_HOOK().
 *
 * @param $variables
 */
function viewsreference_preprocess_viewsreference__view_title(&$variables) {
  $variables['title'] = $variables['variables']['#title'];
}


/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function viewsreference_entity_bundle_field_info_alter(&$fields, \EntityTypeInterface $entity_type, $bundle) {
  foreach ($fields as $field) {
    if ($field->getType() == 'viewsreference') {
      $field->addConstraint('viewsreference_validation');
    }
  }
}